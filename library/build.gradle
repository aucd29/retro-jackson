apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 26
        versionCode 1
        versionName "2.0.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'

    implementation('com.github.tony19:logback-android-classic:1.1.1-3') {
        exclude group: 'com.google.android', module: 'android'
    }
    implementation ('com.github.tony19:logback-android-core:1.1.1-3')  {
        exclude group: 'com.google.android', module: 'android'
    }
    implementation 'org.slf4j:slf4j-api:1.7.5'
    implementation(
        [group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'],
        [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.5'],
        [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5']
    )
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0"
    implementation 'com.squareup.retrofit2:converter-jackson:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.2'

//    implementation 'io.reactivex.rxjava2:rxjava:2.1.1'
//    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
//    implementation 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.0.0'

    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}
